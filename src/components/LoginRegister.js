import React, { useState } from 'react';
import { Sprout, Globe, Eye, EyeOff, Smartphone, Lock, User } from 'lucide-react';
import { useUser } from '../context/UserContext';

const LoginRegister = ({ onLogin }) => {
  const [isLogin, setIsLogin] = useState(true);
  const [showPassword, setShowPassword] = useState(false);
  const { language, changeLanguage, loginUser } = useUser();
  const [formData, setFormData] = useState({
    name: '',
    phone: '',
    password: ''
  });

  const languages = [
    { code: 'hindi', name: '‡§π‡§ø‡§Ç‡§¶‡•Ä', flag: 'üáÆüá≥' },
    { code: 'english', name: 'English', flag: 'üá∫üá∏' },
    { code: 'marathi', name: '‡§Æ‡§∞‡§æ‡§†‡•Ä', flag: 'üáÆüá≥' },
    { code: 'gujarati', name: '‡™ó‡´Å‡™ú‡™∞‡™æ‡™§‡´Ä', flag: 'üáÆüá≥' }
  ];

  const translations = {
    hindi: {
      title: '‡§ï‡•ç‡§∞‡•â‡§™‡§è‡§Ü‡§à ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à',
      subtitle: '‡§∏‡•ç‡§Æ‡§æ‡§∞‡•ç‡§ü ‡§ñ‡•á‡§§‡•Ä ‡§ï‡•á ‡§≤‡§ø‡§è AI ‡§Ü‡§ß‡§æ‡§∞‡§ø‡§§ ‡§™‡•ç‡§≤‡•á‡§ü‡§´‡•â‡§∞‡•ç‡§Æ',
      name: '‡§Ü‡§™‡§ï‡§æ ‡§®‡§æ‡§Æ',
      phone: '‡§´‡•ã‡§® ‡§®‡§Ç‡§¨‡§∞',
      password: '‡§™‡§æ‡§∏‡§µ‡§∞‡•ç‡§°',
      login: '‡§≤‡•â‡§ó‡§ø‡§® ‡§ï‡§∞‡•á‡§Ç',
      register: '‡§∞‡§ú‡§ø‡§∏‡•ç‡§ü‡§∞ ‡§ï‡§∞‡•á‡§Ç',
      switchToRegister: '‡§®‡§Ø‡§æ ‡§ñ‡§æ‡§§‡§æ ‡§¨‡§®‡§æ‡§è‡§Ç',
      switchToLogin: '‡§™‡§π‡§≤‡•á ‡§∏‡•á ‡§ñ‡§æ‡§§‡§æ ‡§π‡•à?',
      language: '‡§≠‡§æ‡§∑‡§æ ‡§ö‡•Å‡§®‡•á‡§Ç'
    },
    english: {
      title: 'Welcome to CropAI',
      subtitle: 'AI-powered platform for smart farming',
      name: 'Your Name',
      phone: 'Phone Number',
      password: 'Password',
      login: 'Login',
      register: 'Register',
      switchToRegister: 'Create new account',
      switchToLogin: 'Already have an account?',
      language: 'Select Language'
    },
    marathi: {
      title: '‡§ï‡•ç‡§∞‡•â‡§™‡§è‡§Ü‡§à ‡§Æ‡§ß‡•ç‡§Ø‡•á ‡§Ü‡§™‡§≤‡•á ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§Ü‡§π‡•á',
      subtitle: '‡§∏‡•ç‡§Æ‡§æ‡§∞‡•ç‡§ü ‡§∂‡•á‡§§‡•Ä‡§∏‡§æ‡§†‡•Ä AI-‡§Ü‡§ß‡§æ‡§∞‡§ø‡§§ ‡§™‡•ç‡§≤‡•Ö‡§ü‡§´‡•â‡§∞‡•ç‡§Æ',
      name: '‡§§‡•Å‡§Æ‡§ö‡•á ‡§®‡§æ‡§µ',
      phone: '‡§´‡•ã‡§® ‡§®‡§Ç‡§¨‡§∞',
      password: '‡§™‡§æ‡§∏‡§µ‡§∞‡•ç‡§°',
      login: '‡§≤‡•â‡§ó‡§ø‡§® ‡§ï‡§∞‡§æ',
      register: '‡§®‡•ã‡§Ç‡§¶‡§£‡•Ä ‡§ï‡§∞‡§æ',
      switchToRegister: '‡§®‡§µ‡•Ä‡§® ‡§ñ‡§æ‡§§‡•á ‡§§‡§Ø‡§æ‡§∞ ‡§ï‡§∞‡§æ',
      switchToLogin: '‡§Ü‡§ß‡•Ä‡§™‡§æ‡§∏‡•Ç‡§® ‡§ñ‡§æ‡§§‡•á ‡§Ü‡§π‡•á?',
      language: '‡§≠‡§æ‡§∑‡§æ ‡§®‡§ø‡§µ‡§°‡§æ'
    },
    gujarati: {
      title: '‡™ï‡´ç‡™∞‡´ã‡™™‡™è‡™Ü‡™à ‡™Æ‡™æ‡™Ç ‡™Ü‡™™‡™®‡´Å‡™Ç ‡™∏‡´ç‡™µ‡™æ‡™ó‡™§ ‡™õ‡´á',
      subtitle: '‡™∏‡´ç‡™Æ‡™æ‡™∞‡´ç‡™ü ‡™ñ‡´á‡™§‡´Ä ‡™Æ‡™æ‡™ü‡´á AI-‡™Ü‡™ß‡™æ‡™∞‡™ø‡™§ ‡™™‡´ç‡™≤‡´á‡™ü‡™´‡´ã‡™∞‡´ç‡™Æ',
      name: '‡™§‡™Æ‡™æ‡™∞‡´Å‡™Ç ‡™®‡™æ‡™Æ',
      phone: '‡™´‡´ã‡™® ‡™®‡™Ç‡™¨‡™∞',
      password: '‡™™‡™æ‡™∏‡™µ‡™∞‡´ç‡™°',
      login: '‡™≤‡´â‡™ó‡™ø‡™® ‡™ï‡™∞‡´ã',
      register: '‡™∞‡™ú‡™ø‡™∏‡´ç‡™ü‡™∞ ‡™ï‡™∞‡´ã',
      switchToRegister: '‡™®‡™µ‡´Å‡™Ç ‡™è‡™ï‡™æ‡™â‡™®‡´ç‡™ü ‡™¨‡™®‡™æ‡™µ‡´ã',
      switchToLogin: '‡™™‡™π‡´á‡™≤‡™æ‡™•‡´Ä ‡™è‡™ï‡™æ‡™â‡™®‡´ç‡™ü ‡™õ‡´á?',
      language: '‡™≠‡™æ‡™∑‡™æ ‡™™‡™∏‡™Ç‡™¶ ‡™ï‡™∞‡´ã'
    }
  };

  const t = translations[language];

  const handleSubmit = (e) => {
    e.preventDefault();
    // Use the entered name or fallback to default
    const userData = {
      name: formData.name || (formData.phone === '+91 98765 43210' ? '‡§∞‡§æ‡§Æ ‡§ï‡•Å‡§Æ‡§æ‡§∞' : '‡§®‡§Ø‡§æ ‡§ï‡§ø‡§∏‡§æ‡§®'),
      phone: formData.phone,
      location: '‡§Æ‡§ß‡•ç‡§Ø ‡§™‡•ç‡§∞‡§¶‡•á‡§∂, ‡§≠‡§æ‡§∞‡§§',
      farmSize: '5 ‡§è‡§ï‡§°‡§º'
    };
    loginUser(userData);
    onLogin('farmer');
  };

  const handleInputChange = (e) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value
    });
  };

  return (
    <div className="min-h-screen flex items-center justify-center p-4">
      <div className="max-w-md w-full">
        {/* Header */}
        <div className="text-center mb-8">
          <div className="flex justify-center mb-4">
            <div className="bg-green-100 p-4 rounded-full">
              <Sprout className="w-12 h-12 text-green-600" />
            </div>
          </div>
          <h1 className="text-3xl font-bold text-gray-800 mb-2">{t.title}</h1>
          <p className="text-gray-600">{t.subtitle}</p>
        </div>

        {/* Language Selector */}
        <div className="mb-6">
          <label className="block text-sm font-medium text-gray-700 mb-2">
            <Globe className="inline w-4 h-4 mr-2" />
            {t.language}
          </label>
          <div className="grid grid-cols-2 gap-2">
            {languages.map((lang) => (
              <button
                key={lang.code}
                onClick={() => changeLanguage(lang.code)}
                className={`p-3 rounded-lg border-2 text-sm font-medium transition-all ${
                  language === lang.code
                    ? 'border-green-500 bg-green-50 text-green-700'
                    : 'border-gray-200 bg-white text-gray-600 hover:border-gray-300'
                }`}
              >
                <span className="mr-2">{lang.flag}</span>
                {lang.name}
              </button>
            ))}
          </div>
        </div>

        {/* Form */}
        <div className="card">
          <form onSubmit={handleSubmit} className="space-y-6">
            {/* Name Field - Show for both login and register */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                <User className="inline w-4 h-4 mr-2" />
                {t.name}
              </label>
              <input
                type="text"
                name="name"
                value={formData.name}
                onChange={handleInputChange}
                placeholder={language === 'english' ? 'Enter your name' : '‡§Ö‡§™‡§®‡§æ ‡§®‡§æ‡§Æ ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç'}
                className="input-field"
                required={!isLogin}
              />
            </div>

            {/* Phone Number */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                <Smartphone className="inline w-4 h-4 mr-2" />
                {t.phone}
              </label>
              <input
                type="tel"
                name="phone"
                value={formData.phone}
                onChange={handleInputChange}
                placeholder="+91 98765 43210"
                className="input-field"
                required
              />
            </div>

            {/* Password */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                <Lock className="inline w-4 h-4 mr-2" />
                {t.password}
              </label>
              <div className="relative">
                <input
                  type={showPassword ? 'text' : 'password'}
                  name="password"
                  value={formData.password}
                  onChange={handleInputChange}
                  placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
                  className="input-field pr-12"
                  required
                />
                <button
                  type="button"
                  onClick={() => setShowPassword(!showPassword)}
                  className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600"
                >
                  {showPassword ? <EyeOff className="w-5 h-5" /> : <Eye className="w-5 h-5" />}
                </button>
              </div>
            </div>

            {/* Submit Button */}
            <button type="submit" className="btn-primary w-full text-lg py-4">
              {isLogin ? t.login : t.register}
            </button>
          </form>

          {/* Switch Mode */}
          <div className="mt-6 text-center">
            <button
              onClick={() => setIsLogin(!isLogin)}
              className="text-green-600 hover:text-green-700 font-medium"
            >
              {isLogin ? t.switchToRegister : t.switchToLogin}
            </button>
          </div>

          {/* Demo Login Buttons */}
          <div className="mt-6 space-y-3">
            <button
              onClick={() => {
                const userData = {
                  name: formData.name || '‡§∞‡§æ‡§Æ ‡§ï‡•Å‡§Æ‡§æ‡§∞',
                  phone: '+91 98765 43210',
                  location: '‡§Æ‡§ß‡•ç‡§Ø ‡§™‡•ç‡§∞‡§¶‡•á‡§∂, ‡§≠‡§æ‡§∞‡§§',
                  farmSize: '5 ‡§è‡§ï‡§°‡§º'
                };
                loginUser(userData);
                onLogin('farmer');
              }}
              className="w-full btn-secondary text-lg py-3"
            >
              üë®‚Äçüåæ Demo Farmer Login
            </button>
            <button
              onClick={() => {
                const userData = {
                  name: formData.name || '‡§™‡•ç‡§∞‡§∂‡§æ‡§∏‡§ï',
                  phone: '+91 98765 00000',
                  location: '‡§Æ‡•Å‡§ñ‡•ç‡§Ø‡§æ‡§≤‡§Ø',
                  farmSize: 'N/A'
                };
                loginUser(userData);
                onLogin('admin');
              }}
              className="w-full btn-secondary text-lg py-3"
            >
              üë®‚Äçüíº Demo Admin Login
            </button>
          </div>
        </div>

        {/* Offline Indicator */}
        <div className="mt-4 text-center">
          <div className="inline-flex items-center px-3 py-1 bg-yellow-100 text-yellow-800 rounded-full text-sm">
            <div className="w-2 h-2 bg-yellow-500 rounded-full mr-2"></div>
            Offline Mode Available
          </div>
        </div>
      </div>
    </div>
  );
};

export default LoginRegister;
